# Import necessary functions from the jsonschema library
# - `validate`: used to validate data against a schema
# - `ValidationError`: raised if data does not conform to the schema
from jsonschema import validate, ValidationError

# =============================
# Input Validation Function
# =============================
def validate_input_against_schema(data, schema):
    """
    Validates user-provided input data against a predefined JSON schema.

    Parameters:
    - data (dict): The input payload that needs to be validated.
    - schema (dict): The JSON schema to validate the input against.

    Returns:
    - tuple:
        - (bool) True if validation passes, False otherwise.
        - (str or None) Error message if validation fails, otherwise None.

    How it works:
    - Uses the `validate` function to check if the input matches the schema.
    - If validation fails, it catches the `ValidationError` and returns False along with the error message.
    """
    try:
        validate(instance=data, schema=schema)  # Attempt to validate the input
        return True, None  # Success: return True and no error message
    except ValidationError as e:
        return False, str(e)  # Failure: return False and the validation error message

# =============================
# Output Validation Function
# =============================
def validate_output_against_schema(result, schema):
    """
    Validates the output generated by the AI agent or processing pipeline against a predefined schema.

    Parameters:
    - result (dict): The output data to be validated.
    - schema (dict): The JSON schema defining the expected format of the output.

    Returns:
    - tuple:
        - (bool) True if output matches the schema, False otherwise.
        - (str or None) Error message if validation fails, otherwise None.

    Why this is useful:
    - Ensures the system produces predictable and well-structured results.
    - Acts as a safeguard before saving or using output in downstream processes (e.g., APIs, dashboards).
    """
    try:
        validate(instance=result, schema=schema)  # Attempt to validate the output
        return True, None  # Success: return True and no error message
    except ValidationError as e:
        return False, str(e)  # Failure: return False and the validation error message
# =============================